{"version":3,"sources":["component/Modal.js","component/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","showModal","person","setShowModal","className","src","picture","medium","alt","name","first","last","dob","age","location","street","number","city","state","postcode","phone","email","Card","useState","onClick","prev","login","uuid","App","people","setPeople","pageNumber","setPageNumber","currentPage","setCurrentPage","fetchData","a","fetch","response","json","data","results","startPeople","displayPeople","slice","map","pageCount","Math","ceil","length","previousLabel","nextLabel","onPageChange","selected","console","log","containerClassName","previousLinkClassName","nextLinkClassName","activeLinkClassName","activeClassName","forcePage","TextField","id","type","value","InputProps","inputProps","max","min","onKeyPress","event","test","key","preventDefault","onChange","e","target","handleChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90e1e8f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Style.css';\r\n\r\nconst Modal = ({showModal, setShowModal, person}) =>{\r\n    return(\r\n        <>\r\n            {showModal? <div className = \"modal\">\r\n                <div className = \"modal-wrapper\">\r\n                    <div className='image-container modal-image-container'>\r\n                        <img src={person.picture.medium} alt=\"Profile Pic\" />\r\n                        <h4>{person.name.first + \" \" + person.name.last}</h4>\r\n                    </div>\r\n                    <div className = 'person-info'>\r\n                        <h4>{person.dob.age + \" years old\"}</h4>\r\n                        <h4>{person.location.street.number + \" \" + person.location.street.name + \", \" + person.location.city + \", \" + person.location.state + \", \" + person.location.postcode}</h4>\r\n                        <h4>{person.phone}</h4>\r\n                        <h4>{person.email}</h4>\r\n                    </div>\r\n                </div>\r\n                </div> : null}\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default Modal;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport './Style.css';\r\nimport Modal from './Modal';\r\n\r\nconst Card = ({person}) =>{\r\n    const [showModal, setShowModal] = useState(false)\r\n    \r\n    // Modal\r\n    const openModal = () =>{\r\n        setShowModal(prev => !prev)\r\n    }\r\n    \r\n    return(\r\n        <div className=\"card-container\" key={`person-id-${person.login.uuid}`}  onClick = {openModal}>\r\n        <div className='image-container'>\r\n          <img src={person.picture.medium} alt=\"Profile Pic\" />\r\n        </div>\r\n        <h4>{person.name.first + \" \" + person.name.last}</h4>\r\n        <Modal showModal={showModal} setShowModal={setShowModal} person = {person}/>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n\r\n","import React, { useState } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Card from './component/Card';\nimport TextField from '@material-ui/core/TextField';\nimport './component/Style.css';\n\nfunction App() {\n  const [people, setPeople] = useState([])\n  const [pageNumber, setPageNumber] = useState(0)\n  const [currentPage, setCurrentPage] = useState(0)\n\n  //Fetch Data\n  const fetchData = async () => {\n\n    const url = \"https://api.randomuser.me/?results=200\"\n    const response = await fetch(url)\n    const data = await response.json()\n\n    setPeople(data.results);\n    setCurrentPage(1)\n  };\n\n  // Pagination\n  const peoplePerPage = 8\n  const startPeople = pageNumber * peoplePerPage\n\n  const displayPeople = people.slice(startPeople, startPeople + peoplePerPage).map(person => (\n    <Card person = {person} key={`person-id-${person.login.uuid}`}/>\n  )\n  )\n\n  const pageCount = Math.ceil(people.length / peoplePerPage) //roundup\n  const changePage = ({selected}) => {\n    setPageNumber(selected);\n    console.log(\"selected\" + selected)\n    setCurrentPage(selected+1)\n\n  };\n\n  // Page Input\n  const handleChange = e =>{\n    setPageNumber(e.target.value-1)\n    setCurrentPage(e.target.value)\n  }\n\n  // Render\n  return (\n    <div className=\"App\">\n      <h1>Random People</h1>\n      <h2>Fetch people list from an API and display</h2>\n      <h5>API Link: https://randomuser.me</h5>\n\n      {/* Fetch data*/}\n      <div>\n        <button className=\"fetch-button\" onClick={fetchData}>\n          Fetch Data\n        </button>\n        <br />\n      </div>\n\n      {/* Display data*/}\n      <div className=\"people-list\">\n\n       {displayPeople}\n       \n\n       <ReactPaginate \n        previousLabel = {\"Previous\"}\n        nextLabel = {\"Next\"}\n        pageCount = {pageCount}\n        onPageChange = {changePage}\n        containerClassName = {\"page-button\"}\n        previousLinkClassName = {\"previous-button\"}\n        nextLinkClassName = {\"next-button\"}\n        activeLinkClassName = {\"page-active\"}\n        activeClassName = {\"page-active\"}\n        forcePage={currentPage-1}\n       />\n\n        <div className=\"page-input\">\n          <TextField\n            id=\"page-input-text\"\n            type=\"number\"\n            value={currentPage}\n            InputProps={{ inputProps: { max: pageCount, min: 1 } }}\n            onKeyPress={(event) => {if (!/[0-9]/.test(event.key)) {event.preventDefault();} }} \n            onChange={(e) => e.target.value <= pageCount && e.target.value > 0? handleChange(e) : null}>\n            {currentPage}\n            </TextField>\n          <span>/</span>\n          <span>{pageCount}</span>\n          {/* <div className=\"has-error\">{error.length > 0? <div>{error}</div> :  null}</div> */}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}